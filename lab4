def are_anagrams(str1, str2):
    # Removing spaces and converting to lowercase
    str1 = str1.replace(" ", "").lower()
    str2 = str2.replace(" ", "").lower()
    
    # Checking if the lengths of the strings are the same
    if len(str1) != len(str2):
        return False
    
    # Sorting the characters in both strings
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    
    # Comparing sorted strings
    if sorted_str1 == sorted_str2:
        return True
    else:
        return False

# Test the function
print(are_anagrams("listen", "silent"))  # Output: True
print(are_anagrams("hello", "world"))    # Output: False


2. Write a Python function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string.


def count_vowels(string):
    # Define a set of vowels
    vowels = {'a', 'e', 'i', 'o', 'u'}
    
    # Convert the string to lowercase to ignore case sensitivity
    string = string.lower()
    
    # Count the number of vowels in the string
    count = sum(1 for char in string if char in vowels)
    
    return count

# Test the function
print(count_vowels("Hello World"))
  # Output: 3
print(count_vowels("Python"))    
   # Output: 1

4. Develop a Python program that takes a string as input and returns True if it is a pangram, False otherwise. A pangram is a sentence containing every letter of the alphabet at least once. Ignore case sensitivity.

def is_pangram(sentence):
    # Define a set of all alphabets
    alphabet = set('abcdefghijklmnopqrstuvwxyz')
    
    # Convert the sentence to lowercase to ignore case sensitivity
    sentence = sentence.lower()
    
    # Remove non-alphabetic characters and create a set of unique characters
    unique_chars = set(char for char in sentence if char.isalpha())
    
    # Check if the set of unique characters contains all alphabets
    return alphabet.issubset(unique_chars)

# Test the function
print(is_pangram("The quick brown fox jumps over the lazy dog"))  
# Output: True
print(is_pangram("Hello world"))                                  # Output: False

5. Create a Python function that takes a string as input and returns True if it is a valid palindrome sentence, considering only alphanumeric characters and ignoring case sensitivity. For example, "A man, a plan, a canal, Panama!" is a valid palindrome.

def is_valid_palindrome(sentence):
    # Remove non-alphanumeric characters and convert to lowercase
    sentence = ''.join(char.lower() for char in sentence if char.isalnum())
    
    # Check if the sentence is equal to its reverse
    return sentence == sentence[::-1]

# Test the function
print(is_valid_palindrome("A man, a plan, a canal, Panama!"))  # Output: True
print(is_valid_palindrome("Hello world"))                       # Output: False


Low Level:
1. Write a Python function that takes two strings as input and returns True if they are anagrams, False otherwise. An anagram is a word or phrase formed by rearranging the letters of another, such as "listen" and "silent".

def are_anagrams(str1, str2):
    # Removing spaces and converting to lowercase
    str1 = str1.replace(" ", "").lower()
    str2 = str2.replace(" ", "").lower()
    
    # Checking if the lengths of the strings are the same
    if len(str1) != len(str2):
        return False
    
    # Sorting the characters in both strings
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    
    # Comparing sorted strings
    if sorted_str1 == sorted_str2:
        return True
    else:
        return False

# Test the function
print(are_anagrams("listen", "silent"))  # Output: True
print(are_anagrams("hello", "world"))    # Output: False

2. Create a Python program that takes a string as input and prints the count of each character in the string, ignoring case sensitivity. For example, for input "Hello World", the output should be:
'h': 1
'e': 1
'l': 3
'o': 2
' ': 1
'w': 1
'r': 1
'd': 1


def count_characters(string):
    # Convert the string to lowercase to ignore case sensitivity
    string = string.lower()
    
    # Create a dictionary to store character counts
    char_count = {}
    
    # Iterate through each character in the string
    for char in string:
        # Increment the count for the current character
        char_count[char] = char_count.get(char, 0) + 1
    
    # Print the character counts
    for char, count in char_count.items():
        print(f"'{char}': {count}")

# Test the function
count_characters("Hello World")

OUTPUT:
'h': 1
'e': 1
'l': 3
'o': 2
' ': 1
'w': 1
'r': 1
'd': 1

3. Write a Python function that takes a string as input and returns the reversed string without using any built-in reverse functions.

def reverse_string(string):
    reversed_string = ''
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string

# Test the function
print(reverse_string("hello"))  # Output: "olleh"


4. Develop a Python program that removes all duplicates from a given string and prints the result. For example, for input "hello", the output should be "helo".
With output 

def remove_duplicates(string):
    unique_chars = ''
    for char in string:
        if char not in unique_chars:
            unique_chars += char
    return unique_chars

# Test the function
print(remove_duplicates("hello"))  
# Output: "helo"


High Level:
1. You're developing a password strength checker tool. Write a Python function that takes a password as input and checks its strength. Print messages indicating whether the password is weak, medium, or strong based on the following criteria:
●	Weak: Less than 6 characters long
●	Medium: Between 6 and 10 characters long
●	Strong: More than 10 characters long

def password_strength(password):
    if len(password) < 6:
        print("Weak: Password is less than 6 characters long")
    elif 6 <= len(password) <= 10:
        print("Medium: Password is between 6 and 10 characters long")
    else:
        print("Strong: Password is more than 10 characters long")

# Test the function
password_strength("password123") 
 # Output: Medium
password_strength("pass")        
 # Output: Weak
password_strength("strongPassword123") 
 # Output: Strong

3. You're developing a registration form for a website. Write a Python program that takes a username as input and checks if it meets the following criteria:
●	Contains only alphanumeric characters (letters and numbers)
●	Starts with a letter
●	Is between 6 and 12 characters long

def validate_username(username):
    # Check if username contains only alphanumeric characters
    if not username.isalnum():
        return False
    
    # Check if username starts with a letter
    if not username[0].isalpha():
        return False
    
    # Check if username length is between 6 and 12 characters
    if not 6 <= len(username) <= 12:
        return False
    
    return True

# Test the function
username = input("Enter a username: ")
if validate_username(username):
    print("Username is valid.")
else:
    print("Username is not valid.")

Output:
Enter a username: myUsername123
Username is valid.
